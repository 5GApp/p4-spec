Title : P4~16~ Portable Switch Architecture (PSA)
Title Note : (draft)
Title Footer: May 15, 2017
Author : The P4.org language consortium
Heading depth: 4

pre, code {
  language: p4;
}
Colorizer: p4
.token.keyword    {
    font-weight: bold;
    font-family: monospace;
   font-size: 10pt;
}

tbd {
    replace: "~ Begin TbdBlock&nl;\
                   TBD: &source;&nl;\
                   ~ End TbdBlock&nl;";
    color: red;
}

Pdf Latex: pdflatex
Document Class: [10pt]article
Package: [top=1in, bottom=1.25in, left=1.25in, right=1.25in]{geometry}
Package: fancyhdr


Tex Header:
  \setlength{\headheight}{30pt}
  \renewcommand{\footrulewidth}{0.5pt}


[TITLE]
[]{tex-cmd: "\newpage"}
[]{tex-cmd: "\fancyfoot[L]{&date; &time;}"}
[]{tex-cmd: "\fancyfoot[C]{P$4_{16}$ Portable Switch Architecture}"}
[]{tex-cmd: "\fancyfoot[R]{\thepage}"}
[]{tex-cmd: "\pagestyle{fancy}"}

~ Begin Abstract

P4 is a language for expressing how packets are processed by the data
plane of a programmable network forwarding element. P4 programs
specify how the various programmable blocks of a target architecture
are programmed and connected.  The Portable Switch Architecture (PSA)
is target architecture that describes common capabilities of network
switch devices which process and forward packets across multiple
interface ports.

~ End Abstract

# Target Architecture Model


The Portable Switch Architecture (PSA) Model has six programmable P4
blocks and two fixed-function blocks, as shown in Figure
[#fig-switch]. Programmable blocks are hardware blocks whose function
can be programmed using the P4 language. The Packet buffer and
Replication Engine (PRE) and the Buffer Queuing Engine (BQE) are
target dependent functional blocks that may be configured for a fixed
set of operations.

Incoming packets are parsed and have their checksums validated and are
then passed to an ingress match action pipeline, which makes decisions
on where the packets should go. After the ingress pipeline, the packet
may be buffered and/or replicated (sent to multiple egress ports). For
each such egress port, the packet passes through an egress match
action pipeline and a checksum update calculation before it is
deparsed and queued to leave the pipeline..

~ Figure { #fig-switch; caption: "Portable Switch Pipeline"; page-align: here; }
![switch]
~
[switch]: psa_pipeline.png { width: 100%; }

A programmer targeting the PSA is required to instantiate objects for
the programmable blocks that conform to these APIs. Note that the
programmable block APIs are templatized on user defined headers and
metadata. In PSA, the user can define a single metadata type for all
controls.

When instantiating the `main` `package` object, the instances
corresponding to the programmable blocks are passed as arguments.

# PSA Data types

## PSA type definitions

These types need to be defined before including the architecture file
and the macro protecting them should be defined.

```
[INCLUDE=psa.p4:Type_defns]
```

## PSA supported metadata types

```
[INCLUDE=psa.p4:Metadata_types]
```

## Match kinds

Additional supported match_kind types

```
[INCLUDE=psa.p4:Match_kinds]
```

## Cloning methods { #sec-cloning-methods }

```
[INCLUDE=psa.p4:Cloning_methods]
```

# PSA Externs

## Packet Replication Engine { #sec-pre }

The ```PacketReplicationEngine``` extern represents the non-programmable
part of the PSA pipeline.

Even though the PRE can not be programmed using P4, it can be
configured both directly using control plane APIs and by setting
intrinsic metadata. In this specification we opt to define the
operations available in the PRE as method invocations. A target
backend is responsible for mapping the PRE extern APIs to the
appropriate mechanisms for performing these operations in the
hardware.

The PRE is instantiated by the architecture and a P4 program can use
it directly. It is an error to instantiate the PRE multiple times.
The PRE is made available to the Ingress programmable block using the
same mechanism as packet_in. A corresponding Buffering and Queuing
Engine (BQE) extern is defined for the Egress pipeline (see
[#sec-bqe]).

Note: some of these operations may not be implemented as primitive
operations on a certain target. However, All of the operations can be
implemented as a combination of other operations. Applications that
rely on non-primitive operations may incur significant performance
penalties, however, they should be functionally correct.

Semantics of behavior for multiple calls to PRE APIs

The semantics of calling the PRE APIs is equivalent to setting
intrinsic metadata fields/bits and assuming that the PRE looks up the
fields in the following order: drop, truncate, multicast, clone,
output_port.

 Following this semantics, examples of the behaviors are:

- any call to drop in the pipeline will cause the packet, and all
   potential clone copies (see below) to drop.

- any call to truncate, will cause the packet (and its clones
   \todo: check) to be truncated.

- multiple calls to send_to_port -- the last call in the ingress
   pipeline sets the output port.

- multiple calls to multicast -- the last in the ingress pipeline
   sets the multicast group

- interleaving send_to_port and multicast -- the semantics of multicast
   is defined as below (https://github.com/p4lang/tutorials/issues/22):
     if (multicast_group != 0)
        multicast_to_group(multicast_group);
     else
        send_to_port(output_port);

   From this, it follows that if there is a call that sets the
   multicast_group, the packet will be multicast to the group that
   last set the multicast group. Otherwise, the packet will be sent
   to the port set by send_to_port.

- multiple clone invocations will cause the packet to be cloned to
   the corresponding port. Any drop call in the pipeline will cause
   the packet to drop, and no clone will be created (following the
   analogy with intrinsic metadata bit fields, drop bits are
   processed before clone bits are looked up).

- resubmit
- recirculate

\TODO: finalize the semantics of calling multiple of the PRE APIs

```
extern PacketReplicationEngine {

  // PacketReplicationEngine(); /// No constructor. PRE is instantiated
                                /// by the architecture.
```

### PRE Methods

#### Unicast operation

Sends packet to a port.

Targets may implement this operation by setting the appropriate
intrinsic metadata or through some other mechanism of configuring the
PRE.

The port parameter is the output port. If the port is PORT_CPU the
packet will be sent to CPU.

```
void send_to_port (in PortId_t port);
```

#### Multicast operation

Sends packet to a multicast group or a port.

Targets may implement this operation by setting the appropriate
intrinsic metadata or through some other mechanism of configuring the
PRE.

The multicast_group parameter is the multicast group id. The control
plane must program the multicast groups through a separate mechanism.

```
void multicast (in MulticastGroup_t multicast_group);
```

#### Drop operation

Do not forward the packet.

The PSA implements drop as an operation in the PRE. While the drop
operation can be invoked anywhere in the ingress pipeline, the
semantics supported by the PSA is that the drop will be at the end of
the pipeline (ingress or egress).

```
void drop      ();
```

#### Clone operation

Create a copy of the packet and send it to the specified port.

The PSA specifies four types of cloning, with the packet sourced
from different points in the pipeline and sent back to ingress
or to the buffering queue in the egress (see [#sec-cloning-methods]).
\TODO: needs both source and destination data

Parameters:

- clone_method  The type of cloning.
- port          The port to send the cloned packet to.

```
void clone     (in CloneMethod_t clone_method, in PortId_t port);
```

#### Clone with extra data operation { #sec-pre-clone-with-data }

Create a copy of the packet with additional data and send it to the
specified port.

The PSA specifies four types of cloning, with the packet sourced
from different points in the pipeline and sent back to ingress
or to the buffering queue in the egress (see [#sec-cloning-methods]).
\TODO: needs both source and destination data

Parameters:

- clone_method  The type of cloning.
- port          The port to send the cloned packet to.
- data additional header data attached to the packet

```
void clone<T>  (in CloneMethod_t clone_method, in PortId_t port, in T data);
```

#### Resubmit operation

Send a packet to the ingress port with additional data appended.

This operation is intended for recursive packet processing.
\TODO: needs both source and destination data

Parameters:

- data A header definition that can be added to the set of
  packet headers.
- port The input port at which the packet will be resubmitted.

```
void resubmit<T>(in T data, in PortId_t port);
```

#### Recirculate operation

Send a post deparse packet to the ingress port with additional data
appended.

This operation is intended for recursive packet processing.
\TODO: needs both source and destination data

Parameters:

- data A header definition that can be added to the set of packet headers.
- port The input port at which the packet will be resubmitted.

```
void recirculate<T>(in T data, in PortId_t port);
```

#### Truncate operation

Truncate the outgoing packet to the specified length.

The length parameter represents the packet length.

```
void truncate(in bit<32> length);
```

## Buffering Queuing Engine { #sec-bqe }

The BufferingQueueingEngine extern represents the the other
non-programmable part of the PSA pipeline (after Egress).

Even though the BQE can not be programmed using P4, it can be
configured both directly using control plane APIs and by setting
intrinsic metadata. In this specification we opt to define the
operations available in the BQE as method invocations. A target
backend is responsible for mapping the BQE extern APIs to the
appropriate mechanisms for performing these operations in the
hardware.

The BQE is instantiated by the architecture and a P4 program can
use it directly. It is an error to instantiate the BQE multiple
times.  The BQE is made available to the Egress programmable block
using the same mechanism as packet_in. A corresponding Packet
Replication Engine (PRE) extern is defined for the Ingress pipeline
(see [#sec-pre]).

Note: some of these operations may not be implemented as primitive
operations on a certain target. However, All of the operations can
be implemented as a combination of other operations. Applications
that rely on non-primitive operations may incur significant
performance penalties, however, they should be functionally
correct.

The ordering semantics of multiple calls to BQE APIs is identical
to the semantics ordering of PRE invocations, for the subset of
functions supported in the BQE.

```
extern BufferingQueueingEngine {

  // BufferingQueueingEngine(); /// No constructor. BQE is instantiated
                                /// by the architecture.

```

### BQE Methods


#### Unicast operation { #sec-bqe-unicast }

Sends packet to port.

Targets may implement this operation by setting the appropriate
intrinsic metadata or through some other mechanism of configuring the
BQE.

The port parameter is the output port. If the port is PORT_CPU the
packet will be sent to CPU.

```
void send_to_port (in PortId_t port);
```

#### Drop operation { #sec-bqe-drop }

Do not forward the packet.

The PSA implements drop as an operation in the BQE. While the
drop operation can be invoked anywhere in the ingress pipeline,
the semantics supported by the PSA is that the drop will be at
the end of the pipeline (ingress or egress).

```
void drop      ();
```

#### Truncate operation { #sec-bqe-truncate }

Truncate the outgoing packet to the specified length

The length parameter represents the packet length.

```
void truncate(in bit<32> length);
```

## Hashes { #sec-hash-algorithms }

Supported hash algorithms:
```
[INCLUDE=psa.p4:Hash_algorithms]
```

### Hash function

Example usage:

```
parser P() {
  Hash<bit<16>>(HashAlgorithm.crc16) h;
  bit<16> hash_value = h.getHash(buffer);
}
```

Parameters:

- algo The algorithm to use for computation (see [#sec-hash-algorithms]).
- O    The type of the return value of the hash.

```
[INCLUDE=psa.p4:Hash_extern]
```

TBD: Should there be a `const` defined that specifies the maximum
allowed value of `max` parameter?


## Checksum computation

Checksums and hash value generators are examples of functions that
operate on a stream of bytes from a packet to produce an integer. The
integer may be used, for example, as an integrity check for a packet
or as a means to generate a pseudo-random value in a given range on a
packet-by-packet or flow-by-flow basis.

Parameters:

- W    The width of the checksum

```
[INCLUDE=psa.p4:Checksum_extern]
```

## Counters

Counters are a simple mechanism for keeping statistics about the
packets that trigger a table in a Match Action unit. Counters are
addressed by the index.

Direct counters fire when the count method is invoked in an action, and
have an instance for each entry in the table. Direct counters are
addressed using P4Runtime table entry as key.


### Counter types

```
[INCLUDE=psa.p4:CounterType_defn]
```

### Counter

```
[INCLUDE=psa.p4:Counter_extern]
```

### Direct Counter

```
[INCLUDE=psa.p4:DirectCounter_extern]
```

## Meters

Meters (RFC 2698) are a more complex mechanism for keeping statistics about
the packets that trigger a table. The meters specified in the PSA
are 3-color meters.

Similar to counters, there are two flavors of meters: indirect and direct.
(Indirect) meters are addressed by index, while direct meters are addressed
using P4Runtime table entry as key.

### Meter types

```
[INCLUDE=psa.p4:MeterType_defn]
```

### Meter colors

```
[INCLUDE=psa.p4:MeterColor_defn]
```

### Meter

```
[INCLUDE=psa.p4:Meter_extern]
```

### Direct Meter

```
[INCLUDE=psa.p4:DirectMeter_extern]
```

## Registers

Registers are stateful memories whose values can be read and
written in actions. Registers are similar to counters, but can be
used in a more general way to keep state.

Although registers cannot be used directly in matching,
register.read may be used as the RHS of an assignment operation,
allowing the current value of the register to be copied into
metadata and be available for matching in subsequent tables.

A simple usage example might be to verify that a "first packet" was seen
for a particular type of flow. A register cell would be allocated to
the flow, initialized to "clear". When the protocol signaled a "first
packet", the table would match on this value and update the flow’s
cell to "marked". Subsequent packets in the flow could would be mapped
to the same cell; the current cell value would be stored in metadata
for the packet and a subsequent table could check that the flow was
marked as active.


```
[INCLUDE=psa.p4:Register_extern]
```

## Random

The random extern provides a reliable, target specific number generator
in the min .. max range.


The set of distributions supported by the Random extern.
\TODO: should this be removed in favor of letting the extern
return whatever distribution is supported by the target?

```
[INCLUDE=psa.p4:RandomDistribution_defn]
```

```
[INCLUDE=psa.p4:Random_extern]
```

## Action Profile

Action profiles are used as table implementation attributes.

Action profiles implement a mechanism to populate table entries
with actions and action data. The only data plane operation
required is to instantiate this extern. When the control plane adds
entries (members) into the extern, they are essentially populating
the corresponding table entries.

```
[INCLUDE=psa.p4:ActionProfile_extern]
```

## Action Selector

Action selectors are used as table implementation attributes.

Action selectors implement another mechanism to populate table
entries with actions and action data. They are similar to action
profiles, with additional support to define groups of
entries. Action selectors require a hash algorithm to select
members in a group. The only data plane operation required is to
instantiate this extern. When the control plane adds entries
(members) into the extern, they are essentially populating the
corresponding table entries.

```
[INCLUDE=psa.p4:ActionSelector_extern]
```

## Packet Generation

\TODO: is generating a new packet and sending it to the stream or is
it adding a header to the current packet and sending it to the
stream (copying or redirecting).

```
[INCLUDE=psa.p4:Digest_extern]
```


## Parser Value Sets

A parser value set is a named set of values that may be used during
packet header parsing time to make decisions.  You may use control
plane API calls to add values to a set, and remove values from a set,
at run time, much like P4 tables.  Unlike tables, they may not have
actions associated with them.  They may only be used to determine
whether a particular value is in the set, returning a Boolean value.
That Boolean value can then be used in a `select` statement to control
parsing (see examples below).

```
[INCLUDE=psa.p4:ValueSet_extern]
```

The control plane API excerpt above is intended to be added as part of
the P4Runtime API[^P4RuntimeAPI].

[^P4RuntimeAPI]: The P4Runtime API, defined as a Google Protocol
    Buffer `.proto` file, can be found at
    <https://github.com/p4lang/PI/blob/master/proto/p4/p4runtime.proto>

The control plane API for a `ValueSet` is similar to that of a table,
except only match fields may be specified, with no actions.  This
includes API calls that specify ternary or range matching, although
for `ValueSet`s these do not require specifying any priority values,
since the only result of a `ValueSet` `is_member` call is "in the set"
or "not in the set".

If a PSA target can do so, it should implement control plane API calls
involving ternary or range matching using ternary or range matching
capabilities in the target, consuming the minimal table entries
possible.

However, a PSA target is allowed to implement such control plane API
calls by "expanding" them into as many exact match entries as needed
to have the same behavior.  For example, a control plane API call
adding all values in the range 5 through 8 may be implemented as
adding the four separate exact match values 5, 6, 7, and 8.

The parser definition below shows an example that uses two `ValueSet`
instances called `tpid_types` and `trill_types`.

```
[INCLUDE=examples/psa-example-value-sets.p4:ValueSet_Example_1]
```

The second example (below) has the same parsing behavior as the
example above, but combines the two parse states
`dispatch_tpid_value_set` and `dispatch_trill_value_set` into one.

```
[INCLUDE=examples/psa-example-value-sets2.p4:ValueSet_Example_2]
```

The third example (below) demonstrates one way to have a `ValueSet`
that matches on multiple fields, by making the type `D` a `struct`
containing multiple bit vectors.

```
[INCLUDE=examples/psa-example-value-sets3.p4:ValueSet_Example_3]
```

A PSA compliant implementation is not required to support any use of a
`ValueSet` `is_member` method call return value, other than directly
inside of a `select` expression.  For example, a program fragment like
the one shown below may be rejected, and thus P4 programmers striving
for maximum portability should avoid writing such code.
```
    bool is_tpid = tpid_types.is_member(parsed_hdr.ethernet.etherType);

    is_tpid = is_tpid && (parsed_hdr.ethernet.dstAddr[47:40] == 0xfe);
    transition select(is_tpid) {
        // ...
```


## Timestamps

A PSA implementation provides an `ingress_timestamp` value for every
packet in the ingress control block, as a field in the struct with
type `psa_ingress_input_metadata_t`.  This timestamp should be close
to the time that the first bit of the packet arrived to the device, or
alternately, to the time that the device began parsing the packet.
This timestamp is _not_ automatically included with the packet in the
egress control block.  A P4 program wishing to use the value of
`ingress_timestamp` in egress code must copy it to a user-defined
metadata field that reaches egress.

A PSA implementation also provides an `egress_timestamp` value for
every packet in the egress control block, as a field of the struct
with type `psa_egress_input_metadata_t`.

One expected use case for timestamps is to store them in tables or
`Register` instances to implement checking for timeout events for
protocols, where precision on the order of milliseconds is sufficient
for most protocols.

Another expected use case is INT (Inband Network Telemetry[^INT]),
where precision on the order of microseconds or smaller is necessary
to measure queueing latencies that differ by those amounts.  It takes
only 0.74 microseconds to transmit a 9 Kbyte Ethernet jumbo frame on a
100 gigabit per second link.

[^INT]: <http://p4.org/p4/inband-network-telemetry>

For these applications, it is recommended that an implementation's
timestamp increments at least once every microsecond.  Incrementing
once per clock cycle in an ASIC or FPGA implementation would be a
reasonable choice.  The timestamp should increment at a constant rate
over time.  For example, it should not be a simple count of clock
cycles in a device that implements dynamic frequency
scaling[^DynamicFrequencyScaling].

[^DynamicFrequencyScaling]: <https://en.wikipedia.org/wiki/Dynamic_frequency_scaling>

Timestamps are of type `timestamp_t`, which is type `bit<W>` for a
value of `W` defined by the implementation.  Timestamps are expected
to wrap around during the normal passage of time.  It is recommended
that an implementation pick a rate of advance and a bit width such
that wrapping around occurs at most once every hour.  Making the wrap
time this long (or longer) makes timestamps more useful for several
use cases.

- Checking for timeouts of protocol hello / keep-alive traffic that is
  on the order of seconds or minutes.
- If timestamps are placed into packets without converting them to
  other formats, then external data analysis systems using those
  timestamps will in many cases need to do so, e.g. to compare
  timestamps stored in packets by different PSA devices.  These
  systems will need different formulas and/or parameters to perform
  this conversion for each wrap period, or to add extra external time
  references to the recorded data.  The extra data required for
  accurate conversion is lower, and the likelihood of conversion
  mistakes is lower, if the timestamp values wrap less often.
- If timestamps are converted to other formats within a P4 program, it
  will need access to parameters that are likely to change every wrap
  time, e.g. at least a "base value" to add some calculated value to.
  A straightforward way to do this requires the control plane to
  update these values at least once or twice per timestamp wrap time.
- Programs that wish to use `(egress_timestamp - ingress_timestamp)`
  to calculate the queueing latency experienced by a packet need the
  wrap time to exceed the maximum queueing latency.

Examples of the number of bits required for wrap times of at least one
hour:

- A 32-bit timestamp advancing by 1 per microsecond takes 1.19 hours
  to wrap.
- A 42-bit timestamp advancing by 1 per nanosecond takes 1.22 hours to
  wrap.

A PSA implementation may optionally provide a way to convert
timestamps to other units such as microseconds or nanoseconds at
packet forwarding time in one's P4 program, and if so it is
recommended to implement the methods defined below.  This is not a
requirement for all PSA implementations because such a conversion
would typically require taking a timestamp value and dividing it or
multiplying it by a constant value of the same bit width that is
unlikely to be a power of 2, and this is expected to be somewhat
expensive on some implementation.  It may help in implementing such a
conversion function to know that dividing of a `W`-bit value by a
constant can be implemented using `W`-bit multiplication by a
constant[^MG2011].

[^MG2011]: N. Möller and T. Granlund, “Improved division by invariant integers,” IEEE Transactions on Computers, vol. 60, no. 2, pp. 165 –175, Feb. 2011

```
[INCLUDE=psa.p4:Timestamp_extern]
```


A PSA implementation is not required to implement time
synchronization, e.g. via PTP[^PTP] or NTP[^NTP].

[^PTP]: <https://en.wikipedia.org/wiki/Precision_Time_Protocol>
[^NTP]: <https://en.wikipedia.org/wiki/Network_Time_Protocol>

TBD: This text has been written assuming that it is more important for
timestamps to be increasing at a constant rate, with no sudden "jumps"
due to time synchronization events.  Is this what people want from
timestamps?

TBD: Some time synchronization methods avoid sudden "jumps" by
temporarily speeding up or slowing down the rate of increase by a
small percentage, until the desired synchronization is achieved.
(TBD: which ones?  citation?).  Would anyone mind if PSA
implementations were allowed to do this with their timestamp values?

The control plane API excerpt below is intended to be added as part of
the P4Runtime API[^P4RuntimeAPI].

```
// The TimestampInfo and Timestamp messages should be added to the
// "oneof" inside of message "Entity".  It is only intended to be
// read.  Attempts to update this entity have no effect, and should
// return an error status that the entity is read only.

message TimestampInfo {
  // The number of bits in the device's `timestamp_t` type.
  uint32 size_in_bits = 1;
  // The timestamp value of this device increments
  // `increments_per_period` times every `period_in_seconds` seconds.
  uint64 increments_per_period = 2;
  uint64 period_in_sec = 3;
}

// The timestamp value can be read or written.  Note that if there are
// already timestamp values stored in tables or `Register` instances,
// they will not be updated as a result of writing this timestamp
// value.  Writing the device timestamp is intended only for
// initialization and testing.

message Timestamp {
  bytes value = 1;
}
```

For every packet `P` that is processed by ingress and then egress,
with the minimum possible latency in the packet buffer, it is
guaranteed that the `egress_timestamp` value for that packet will be
the same as, or slightly larger than, the `ingress_timestamp` value
that the packet was assigned on ingress.  By "slightly larger than",
we mean that the difference `(egress_timestamp - ingress_timestamp)`
should be a reasonably accurate estimate of this minimum possible
latency through the packet buffer, perhaps truncated down to 0 if
timestamps advance more slowly than this minimum latency.

Consider two packets such that at the same time (e.g. the same clock
cycle), one is assigned its value of `ingress_timestamp` near the time
it begins parsing, and the other is assigned its value of
`egress_timestamp` near the time that it begins its egress processing.
It is allowed that these timestamps differ by a few tens of
nanoseconds (or by one "tick" of the timestamp, if one tick is larger
than that time), due to practical difficulties in making them always
equal.

Recall that the binary operators `+` and `-` on the `bit<W>` type in
P4 are defined to perform wrap-around unsigned arithmetic.  Thus even
if a timestamp value wraps around from its maximum value back to 0,
you can always calculate the number of ticks that have elapsed from
timestamp $t1$ until timestamp $t2$ using the expression $(t2 - t1)$
(if more than $2^W$ ticks have elapsed, there will be aliasing of the
result).  For example, if timestamps were $W >= 4$ bits in size,
$t1=2^{W}-5$, and $t2=3$, then $(t2-t1)=8$.

It is perfectly reasonable to discard some bits of a timestamp value
in a P4 program for use cases that do not need the full wrap time or
precision.  For example, an application that only needs to detect
protocol timeouts with an accuracy of 1 second can discard the least
significant bits of a timestamp that change more often than every 1
second.

Suppose another application needs full precision of the least
significant bits of a timestamp, but the combination of the control
plane and P4 program are designed to examine all entries of a
`Register` array where these partial timestamps are stored more often
than once every 5 seconds, to prevent wrapping.  In that case, the P4
program could discard the most significant bits of the timestamp so
that it wraps every 8 seconds, and store only those partial timestamps
in the `Register` instance.


# Programmable blocks

The following declarations provide a template for the programmable
blocks in the PSA. The P4 programmer is responsible for
implementing controls that match these interfaces and instantiate
them in a package definition.

The current implementation uses the same user-defined metadata
structure for all the controls.
An alternative design is to split the user-defined metadata into an
input parameter and an output parameter for each block. The
compiler will have to check that the out parameter of a block
matches the in parameter of the subsequent block.


```
[INCLUDE=psa.p4:Programmable_blocks]
```
